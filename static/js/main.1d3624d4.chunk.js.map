{"version":3,"sources":["components/Layout.style.js","components/Layout.jsx","components/Popover.js","App.js","serviceWorker.js","index.js"],"names":["flipInYAnimation","keyframes","flipInY","flashAnimation","flash","StyledDiv","styled","div","Button","button","props","primary","Form","form","Layout","useState","modalOpen","setModalOpen","todo","setTodo","label","setLabel","date","setDate","comment","setComment","toDos","setToDos","labelHandler","e","target","checked","includes","value","filter","item","className","onClick","map","done","key","id","timeDiff","OverlayTrigger","trigger","placement","overlay","content","Popover","Content","isOpen","requestClose","onSubmit","preventDefault","uuidv4","document","querySelectorAll","forEach","htmlFor","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d3624d4.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components';\nimport { flipInY,flash } from 'react-animations';\n\nconst flipInYAnimation = keyframes`${flipInY}`;\nconst flashAnimation = keyframes`${flash}`;\n\nexport const StyledDiv = styled.div`\n    position: absolute;\n    top: 20px;\n    left: 50%;\n    padding: 15px;\n    transform: translateX(-50%);\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    min-width: 450px;\n    border: 2px solid #d5d5d5;\n    border-radius: 5px;\n    \n\n    .topic {\n        font-size: 45px;\n        padding: 20px 0 30px;\n    }\n    &:hover .topic {\n        animation: 3s ${flipInYAnimation};\n    }\n\n    .todos {\n        margin: 20px 0 5px;\n        width: 100%;\n        border: 2px solid palevioletred; \n        border-radius: 5px;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        \n        &.done {\n            background: #c3ffeb;\n        }\n        .todos-top {\n            width: 100%;\n            border-bottom: 1px solid #d5d5d5;\n            display: flex;\n            justify-content:space-between;\n\n            .label-box {\n                padding: 5px;\n                font-size: 20px;\n            }\n            .buttons {\n                padding: 5px;\n                & > span {\n                    font-size: 18px;\n                    padding: 0 3px;\n                }\n            }\n            \n        }\n        .todos-bottom {\n            width: 100%;\n            \n            .todo-box {\n                color: grey;\n                text-align: left;\n                padding: 5px;\n            }\n            .date-comm {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                .datebox {\n                    padding: 5px 10px 5px 5px;\n                    color: grey;\n                    font-size: 13px;\n                    border-radius: 3px;\n                    &.bg-relax {\n                        background: lightgreen;\n                    }\n                    &.bg-warn {\n                        background: yellow;\n                    }\n                    &.bg-past {\n                        background: #ffb6b6;;\n                    }\n                \n                    \n                }\n                .comments {\n                    span {\n                        font-size: 18px;\n                        padding-left: 10px;\n                    }  \n                }\n            }\n\n        }\n    }\n`;\n\nexport const Button = styled.button`\n    animation: 5s ${flashAnimation};\n    /* Adapt the colors based on primary prop */\n    background: ${props => props.primary ? \"palevioletred\" : \"white\"};\n    color: ${props => props.primary ? \"white\" : \"palevioletred\"};\n\n    font-size: 1.2rem;\n    padding: 0.5rem;\n    font-weight: bold;\n    border: 2px solid palevioletred;\n    border-radius: 5px;\n    width: 100%;\n    margin-bottom: 10px;\n\n    &:focus {\n        outline: none;\n    }\n    &:hover {\n        background: ${props => props.primary ? \"white\" : \"palevioletred\"};\n        color: ${props => props.primary ? \"palevioletred\" : \"white\"};\n        cursor: pointer;\n    }\n`;\n\nexport const Form = styled.form`\n\n    margin: 20px;\n    *:focus {\n        outline: none;\n    }\n\n    & > label {\n        display: block;\n        font-size: 18px;\n        font-weight: bold;\n        margin-top: 5px;\n    }\n    & > input {\n        width: 400px;\n        height: 35px;\n        border-radius: 5px;\n        margin: 5px;\n        font-size: 15px; \n        color: grey;   \n    }\n    fieldset {\n        color: grey;\n        font-size: 15px;\n        & > input {\n           margin: 0 10px;\n        }\n    }\n   \n    textarea {\n        width: 400px;\n        min-height: 70px;\n        border-radius: 5px;\n        color: grey;\n    }\n`;","import React, {useState, Fragment} from 'react'\r\nimport { StyledDiv, Button, Form } from \"./Layout.style\";\r\nimport HyperModal from \"react-hyper-modal\";\r\nimport { OverlayTrigger } from \"react-bootstrap\";\r\nimport { popoverBox } from \"./Popover\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction Layout() {\r\n    // manage the modal\r\n    const [modalOpen, setModalOpen] = useState(false); // first it is invisible (false), when the button is clicked it will turn true and appear on browser as a modal\r\n\r\n    // to get the events data\r\n    const [todo, setTodo] = useState('');\r\n    const [label, setLabel] = useState([]);\r\n    const [date, setDate] = useState('');\r\n    const [comment, setComment] = useState('');\r\n\r\n    // to show all events on browser\r\n    const [toDos, setToDos] = useState([]);\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();  //when we get data from data, we have to write this.\r\n        setToDos([\r\n                ...toDos,{\r\n                id: uuidv4(), // it's a func, so we have to write ()\r\n                todo ,      //ES6 todo : todo\r\n                label ,     //ES6 label: label\r\n                date ,      //Es6 date: date\r\n                comment ,   //ES6 comment: comment\r\n\r\n                done : false\r\n                // when the state is like this, it only takes the list item, so we have to copy the item array first. ...toDos\r\n                }])\r\n                // when we want to delete the previus values, we write:\r\n                setTodo('')\r\n                setLabel([])\r\n                setDate('')\r\n                setComment('')\r\n                // to close the modal automatically:\r\n                setModalOpen(false)\r\n\r\n                // when we want clear all the labels, we use forEach func for every input\r\n                document.querySelectorAll('input[type=checkbox]').forEach( item => item.checked = false)\r\n\r\n    }\r\n    const labelHandler = e => {\r\n        // for checkoxes we use e.target.checked\r\n        if (e.target.checked) {\r\n            if (!label.includes(e.target.value)) {\r\n                setLabel([ ...label, e.target.value ])\r\n            }\r\n        }else{\r\n            if (label.includes(e.target.value)) {\r\n                setLabel(label.filter( item => item !== e.target.value))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const doneHandler = () =>{}\r\n\r\n    const deleteHandler = () => {}\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <Fragment>\r\n        <StyledDiv>\r\n            <div className=\"topic\">\r\n                ToDos List\r\n            </div>\r\n            <Button primary onClick= { () => setModalOpen(true) }>Add ToDo</Button>\r\n            {\r\n                toDos.map( item =>\r\n                                    <div className= { item.done ? \"todos done\" : \"todos\"} key={item.id} >\r\n                                        <div className=\"todos-top\">\r\n                                            <div className=\"label-box\">{item.label}</div>\r\n                                            <div className=\"buttons\">\r\n                                                <span onClick={() => doneHandler(item)}>&#x2705;</span>\r\n                                                <span onClick={() => deleteHandler(item)}>&#x274C;</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"todos-bottom\">\r\n                                            <div className=\"todo-box\">{item.todo}</div>\r\n                                            <div className=\"date-comm\">\r\n                                                <div className={item.timeDiff > 1 ? \"datebox bg-relax\" : item.timeDiff > 0 ? \"datebox bg-warn\" : \"datebox bg-past\"} > &#x1F4C6;{item.date}</div>\r\n                                                <OverlayTrigger trigger=\"hover\" placement=\"top\" overlay={popoverBox (item.comment)}>\r\n                                                    <div className=\"comments\">{item.comment ? <span>&#x1F4AC;</span> : null}</div>\r\n                                                </OverlayTrigger>\r\n\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                )\r\n            }\r\n        </StyledDiv>\r\n\r\n        <HyperModal isOpen={ modalOpen }\r\n                    requestClose={ () => setModalOpen(false) }\r\n        >\r\n            <Form className=\"form-box\" onSubmit={submitHandler}>\r\n                <label htmlFor=\"todo\">ToDo</label>\r\n                <input type=\"text\" id=\"todo\" value= {todo} onChange={ e => setTodo(e.target.value)} />\r\n                <label>Label</label>\r\n                <fieldset>\r\n                    <input type=\"checkbox\" value='&#x1F46A;' onChange={ labelHandler } /> &#x1F46A; Family\r\n                    <input type=\"checkbox\" value='&#x1F3E0;' onChange={ labelHandler } /> &#x1F3E0; Home\r\n                    <input type=\"checkbox\" value=\"&#x1F477;\" onChange={ labelHandler } /> &#x1F477; Business\r\n                    <input type=\"checkbox\" value=\"&#x1F6CD;\" onChange={ labelHandler } /> &#x1F6CD; Shopping\r\n                    <input type=\"checkbox\" value=\"&#x1F393;\"  onChange={ labelHandler }/> &#x1F393; School\r\n                    <input type=\"checkbox\" value=\"&#x1F6A8;\" onChange={ labelHandler } /> &#x1F6A8; Emergency\r\n                    <input type=\"checkbox\" value=\"&#x23F0;\"  onChange={ labelHandler }/> &#x23F0; Important\r\n                    <input type=\"checkbox\" value=\"&#x1F36E;\"  onChange={ labelHandler }/> &#x1F36E; Not Important\r\n                </fieldset>\r\n                <label htmlFor=\"date\">Due To</label>\r\n                <input type=\"date\" id=\"date\" value={date} onChange={ e => setDate(e.target.value) } />\r\n                <label htmlFor=\"comment\">Comment</label>\r\n                <textarea id=\"comment\" value={comment} onChange={ e => setComment(e.target.value) } />\r\n\r\n                <Button type=\"submit\" primary>Add Item</Button>\r\n            </Form>\r\n        </HyperModal>\r\n\r\n    </Fragment>\r\n)\r\n\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react';\r\nimport { Popover } from 'react-bootstrap';\r\n\r\n\r\nexport const popoverBox = ( content ) => (\r\n    <Popover className=\"m-2 p-2 bg-warning\" id=\"popover-basic\">\r\n        <Popover.Content>\r\n            { content }\r\n        </Popover.Content>\r\n    </Popover>\r\n);\r\n","import React from 'react';\nimport Layout from './components/Layout';\n\nfunction App() {\n  return (\n    <div>\n        <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}